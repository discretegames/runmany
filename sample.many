comment area

~~~| stdin |~~~

default stdin

~~~| language1 | language2 |~~~

snippet that will attempt to run in language1 and language2

~~~| language |~~~

commented snippet because of !, gets totally ignored

~~~| stdin | lang1 | lang2 |~~~
defines the stdin for lang1 and lang2 that might be run later
course newlines
~~~||~~~

a valid snippet with no language, basically acts as a comment

~~~| stdin | Python |~~~
Bob
~~~| Python |~~~

print(input('enter name'))


# what if you want literal ~~~| in stdin? I guess you can't - or don't put it at start of line

~~~| argv | Python | JS |~~~
stuff here will be added to the $argv part of the command, or after the $file
may be multiple lines with line continuation and such
but usually just one crammed in
~~~| more stuff |~~~

~~~| condensed | Python 3 |~~~ 

condensed mode means all empty lines (or even blank lines) are totally ignored

but should these apply to just the language they mention or all of them after that point?
and is condensed even that important - especially if not the default


~~~| JS | argv |~~~

the stdin/argv could have different syntax
maybe like

$$$| JS | Ruby |$$$

for stdin, and

@@@| Python |@@@

for argv

$$$|  |$$$

this would set it for all then
which is kinda weird
but so is having reserved names


$$$| Python \d |$$$
i mean you could get fancy with the names and do string matching and everything, but that's totally overkill


@@@| ALL |@@@

Any could be built in but meh, blank is fine imo

$$$||$$$ = stdin for all languages | separated
@@@||@@@ = argv for 
! before any section to 



frankly All or ALL should especially match all languages and blank should match None
just makes more sense that way
ok

hmm, thinking a bit more I still want All to not really be hardcoded
which means language groups and ability to match all in languages.json
could just have "match_all": "All" by default
yeah, simpler than regex but fine frankly

want to get rid of other_names anyway

still thinking about newlines for argv and such

@@@| Python |@@@
--test --dev
$$$| Python |$$$
1
2
3
~~~| Python | Ruby |~~~
23


ok
the $$$| or @@@| applies for the matched languages until the next $$$| or @@@| declaration that matches

so order matters - hmm, should it
yeah, that's fine

what if you want to test multiple stdins for one snippet? that seems common
how to do it without duplicating the snippet, hmm
backreferences to previous snippet or something

better way is to allow for a list of stdins under $$$| This thing |$$$
like

$$$| Python |$$$
stdin1

$$$|$$$

stdin2

$$$|$$$

stdin3

@@@| likewise for |@@@

args1

@@@|@@@

args2


so stdins and argvs are lists and for each argv, for each stdin, run code in lang with those
that works

and how about ignore leading blank line if there is one
ditto last line
this is for any snippet

but a way to disable this would be nice

could have 3 compact modes - none, oneblank, allblanks, allblankseveninmiddle
0 1 *
this can easily turn into lots of options

maybe just one, no all blanks is fine and have a "compact" option in the js, or strip_blank_lines

ideally this could be specified for every single snippet rather than all at once

@@@|@@@


@@@| Python |@@@




