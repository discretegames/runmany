% Programs that print the first command line argument to stdout.

Argv: foobar arg2

Ada:
    with Ada.Command_line; use Ada.Command_Line;
    with Ada.Text_IO; use Ada.Text_IO;
    procedure Argv is
    begin
        Put_Line(Argument(1));
    end Argv;

Bash:
	#!/bin/bash
	echo $1

Batch:
	@echo off
	echo %1

C:
    #include <stdio.h>

    int main(int argc, char *argv[]) {
    	printf("%s\n", argv[1]);
    	return 0;
    }

C#:
    namespace Argv {
        class Argv {
            static void Main(string[] args)
            {
                System.Console.WriteLine(args[0]);
            }
        }
    }

C++:
    using namespace std;
    #include <iostream>

    int main(int argc, char *argv[]) {
        cout << argv[1] << endl;
        return 0;
    }

Dart:
    void main(List<String> args) {
        print(args[0]);
    }

Fortran:
    program argv
        character(len=256) :: arg
        call getarg(1, arg)
        write(*, "(a)") trim(arg)
    end program

Go:
    package main
    import "fmt"
    import "os"

    func main() {
        fmt.Println(os.Args[1])
    }

Groovy: println args[0]

Haskell:
    import System.Environment
    main = do
        arg <- head <$> getArgs
        putStrLn arg

Java:
    public class Argv {
        public static void main(String[] args) {
            System.out.println(args[0]);
        }
    }

JavaScript: console.log(process.argv[2])

Julia: println(ARGS[1])

Kotlin:
    fun main(args: Array<String>) { 
        println(args[0])
    }

Lisp:
    (format t (nth 1 sb-ext:*posix-argv*))
    (terpri)

Lua: print(arg[1])

MIPS:
	main:
	lw $a0, 0($a1)
	li $v0, 4
	syscall
	li $v0, 10
	syscall

Pascal:
    program argv;
    begin
        writeln(ParamStr(1));
    end.

Perl: print $ARGV[0] . "\n";

PHP:
    <?php
    echo $argv[1] . "\n";
    ?>

PowerShell:
	Write-Host $args[0]

Python:
    import sys
    print(sys.argv[1])

Python 2:
    import sys
    print sys.argv[1]

R:
    args <- (commandArgs(TRUE))
    writeLines(args[1])

Racket:
    #lang racket
    (printf (vector-ref (current-command-line-arguments) 0))
    (newline)

Ruby: puts ARGV[0]

Rust:
    use std::env;

    fn main() {
        let args: Vec<String> = env::args().collect();
        println!("{}", &args[1]);
    }

Scala: println(args(0))

TypeScript:
    console.log(Deno.args[0])

VBScript: WScript.Echo WScript.Arguments.item(0)

Visual Basic:
    Module Argv
        Sub Main(ByVal args As String())
            Console.WriteLine(args(0))
        End Sub
    End Module